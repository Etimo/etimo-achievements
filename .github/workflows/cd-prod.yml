name: Production

concurrency: production

on:
  workflow_dispatch:
    inputs:
      verify:
        description: 'Are you sure? Type "YES"'
        required: true

defaults:
  run:
    shell: bash

env:
  DOMAIN: https://achievements-live.staging.etimo-test.live
  API_URL: https://achievements-live.staging.etimo-test.live/api
  FRONTEND_URL: https://achievements-live.staging.etimo-test.live
  GOOGLE_REDIRECT_URI: https://achievements-live.staging.etimo-test.live/login/callback
  INGRESS_URL: achievements-live.staging.etimo-test.live
  NODE_ENV: production
  UNLEASH_URL: achievements-unleash-live.staging.etimo-test.live
  LOG_HEADERS: true
  # Stored as environment secrets
  API_KEY: ${{ secrets.API_KEY }}
  COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  JWT_EXPIRATION_SECONDS: ${{ secrets.JWT_EXPIRATION_SECONDS }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  SLACK_CHANNEL_HIGH: ${{ secrets.SLACK_CHANNEL_HIGH }}
  SLACK_CHANNEL_MEDIUM: ${{ secrets.SLACK_CHANNEL_MEDIUM }}
  SLACK_CHANNEL_LOW: ${{ secrets.SLACK_CHANNEL_LOW }}
  # Stored as repository secrets
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
  UNLEASH_TOKEN: ${{ secrets.UNLEASH_TOKEN }}
  # Stored as organisation secrets
  GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
  # Pretty much static variables
  API_PORT: 3000
  API_ROOT: /api/
  DEBUG: false
  WEB_PORT: 3001

jobs:
  deploy:
    if: github.event.inputs.verify == 'YES'
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production
    env:
      KUBERNETES_NAMESPACE: achievements-live
      RELEASE: ${{ github.sha }}

    steps:
      - name: Get staging version
        id: version
        shell: bash
        env:
          URL: https://achievements-test.staging.etimo-test.live/version
        run: |
          remote_commit=$(curl --fail -s $URL | jq -r '.commit')
          echo "Found remote commit $remote_commit"
          echo "::set-output name=remote-commit::$remote_commit"

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.version.outputs.remote-commit }}

      - name: Get information
        id: info
        run: |
          echo "::set-output name=current-commit::$(git rev-parse HEAD)"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Deploy database migration job
        id: deploy-init
        uses: ./.github/actions/deploy-kubernetes
        with:
          kubeconfig: ${{ env.KUBECONFIG }}
          namespace: ${{ env.KUBERNETES_NAMESPACE }}
          object-path: .kubernetes/.init/migrate

      - name: Verify database migrations
        uses: ./.github/actions/verify-migrations
        with:
          migration-object: ${{ steps.deploy-init.outputs.deployment-yaml }}
          kubeconfig: ${{ env.KUBECONFIG }}
          namespace: ${{ env.KUBERNETES_NAMESPACE }}

      - name: Tag release
        id: tag
        shell: bash
        # outputs "tagged" == "true" if the tag was created
        run: ./.github/scripts/tag-release.sh ${{ steps.version.outputs.remote-commit }}

      - name: Deploy application
        if: steps.tag.outputs.tagged == 'true'
        uses: ./.github/actions/deploy-kubernetes
        with:
          kubeconfig: ${{ env.KUBECONFIG }}
          namespace: ${{ env.KUBERNETES_NAMESPACE }}
          ignore-path: .kubernetes/.init
          wait: api-deployment,web-deployment

      - name: Verify application version
        uses: ./.github/actions/verify-version
        with:
          require-commit: ${{ steps.version.outputs.remote-commit }}
          urls: ${{ env.FRONTEND_URL }} ${{ env.API_URL }}

      - name: Promote api image
        uses: ./.github/actions/docker-promote
        with:
          from-image-name: niclaslindstedt/etimo-achievements-api
          from-tag: ${{ steps.info.outputs.current-commit }}
          to-image-name: niclaslindstedt/etimo-achievements-api
          to-tag: prod

      - name: Promote web image
        uses: ./.github/actions/docker-promote
        with:
          from-image-name: niclaslindstedt/etimo-achievements-web
          from-tag: ${{ steps.info.outputs.current-commit }}
          to-image-name: niclaslindstedt/etimo-achievements-web
          to-tag: prod

      - name: Promote migrate image
        uses: ./.github/actions/docker-promote
        with:
          from-image-name: niclaslindstedt/etimo-achievements-migrate
          from-tag: ${{ steps.info.outputs.current-commit }}
          to-image-name: niclaslindstedt/etimo-achievements-migrate
          to-tag: prod

      - name: Tag api image with version
        if: steps.tag.outputs.tagged == 'true'
        uses: ./.github/actions/docker-promote
        with:
          from-image-name: niclaslindstedt/etimo-achievements-api
          from-tag: ${{ steps.info.outputs.current-commit }}
          to-image-name: niclaslindstedt/etimo-achievements-api
          to-tag: ${{ steps.tag.outputs.tag }}

      - name: Tag web image with version
        if: steps.tag.outputs.tagged == 'true'
        uses: ./.github/actions/docker-promote
        with:
          from-image-name: niclaslindstedt/etimo-achievements-web
          from-tag: ${{ steps.info.outputs.current-commit }}
          to-image-name: niclaslindstedt/etimo-achievements-web
          to-tag: ${{ steps.tag.outputs.tag }}

      - name: Tag migrate image with version
        if: steps.tag.outputs.tagged == 'true'
        uses: ./.github/actions/docker-promote
        with:
          from-image-name: niclaslindstedt/etimo-achievements-migrate
          from-tag: ${{ steps.info.outputs.current-commit }}
          to-image-name: niclaslindstedt/etimo-achievements-migrate
          to-tag: ${{ steps.tag.outputs.tag }}
