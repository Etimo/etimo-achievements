name: Verify version
description: Verifies that the deployed application has the correct version

inputs:
  require-commit:
    description: The commit sha that is expected to be deployed
    default: ${{ github.sha }}
  interval-seconds:
    description: How many seconds to wait between each attempt
    default: 2
  attempts:
    description: How many attempts to get the version before giving up
    default: 30
  urls:
    description: Space-separated list of urls to check
    required: true
  error-message:
    description: A custom error message upon failure
    default: Could not deploy the correct application version
  debug:
    description: Output debug information
    default: false

runs:
  using: composite
  steps:
    - name: Verify version
      shell: bash
      run: |
        DEBUG="${{ inputs.debug }}"
        expected_commit="${{ inputs.require-commit }}"

        # Default to current commit
        if [ -z "$expected_commit" ]; then
          expected_commit="${{ github.sha }}"
        fi

        read -r -a urls <<< "${{ inputs.urls }}"
        attempts=${{ inputs.attempts }}
        for i in $(seq 1 $attempts); do
          if [ "$DEBUG" = "true" ]; then
            echo "Trying (${i}/${attempts})..."
          fi

          found=1
          for url in "${urls[@]}"; do
            remote_commit=$(curl --fail -s "${url}/version" | jq -r '.commit' 2>/dev/null)

            if [ "$remote_commit" != "$expected_commit" ]; then
              echo "$url: $remote_commit != $expected_commit"
              found=0
              continue
            fi

            echo "$url: Version OK!"
          done

          if (( found )); then
            echo "Remote version was OK! ($expected_commit)"
            exit 0
          else
            echo "Remote version was NOT OK! ($remote_commit)"
            exit 1
          fi

          sleep ${{ inputs.interval-seconds }}
        done
