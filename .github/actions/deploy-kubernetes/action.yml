name: Docker Build
description: Build and push an app

inputs:
  kubeconfig:
    description: The kubeconfig file contents, with newlines replaced with '\n' (use a secret)
    required: true
  object-path:
    description: The path to the Kubernetes objects (yaml files)
    default: .kubernetes
  ignore-path:
    description: Pattern of what Kubernetes objects to ignore
    default: .init
  namespace:
    description: The namespace in the Kubernetes cluster
    required: true
  cluster:
    description: The cluster that is being deployed to (staging | production)
    default: staging
  ingress-url:
    description: The base url of the Kubernetes ingress
    required: true
  wait:
    description: Wait for deployment(s) to finish before returning (comma-separated list)
    default: false
  debug:
    description: Output the resulting deployment yaml file
    default: false

runs:
  using: composite
  steps:
    - name: Prepare environment
      shell: bash
      run: |
        echo "TAG=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV
        echo "VERSION=$(git rev-list HEAD --count)" >> $GITHUB_ENV
        echo "DATE=$(date '+%Y%m%d%H%M%S')" >> $GITHUB_ENV
        echo "KUBERNETES_NAMESPACE=${{ inputs.namespace }}" >> $GITHUB_ENV
        echo "INGRESS_URL=${{ inputs.ingress-url }}" >> $GITHUB_ENV

    - name: Generate Kubernetes deployment spec
      shell: bash
      run: |
        shopt -s globstar
        :>__deploy_template
        for f in ${{ inputs.object-path }}/**/*.yml; do
          if [[ $f == *"${{ inputs.ignore-path }}"* ]]; then
            continue
          fi
          cat $f >> __deploy_template; echo --- >> __deploy_template
        done
        replace_vars="$(env | cut -f1 -d= | xargs -I {} echo \${} | xargs)"
        envsubst "$replace_vars" < __deploy_template > __deployment.yaml
        if [ "${{ inputs.debug }}" = "true" ]; then cat __deployment.yaml; fi

    - name: Deploy to Kubernetes
      shell: bash
      run: |
        echo -e "${{ inputs.kubeconfig }}" > kubeconfig
        kubectl --kubeconfig=kubeconfig --namespace $KUBERNETES_NAMESPACE \
          apply -f __deployment.yaml
        if [ "${{ inputs.wait }}" != "false" ]; then
          IFS=',' read -r -a deployments <<< "${{ inputs.wait }}"
          for deployment in "${deployments[@]}"; do
            kubectl --kubeconfig=kubeconfig --namespace $KUBERNETES_NAMESPACE \
              rollout status -w "deployment/$deployment"
          done
        fi
