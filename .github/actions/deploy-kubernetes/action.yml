name: Docker Build
description: Build and push an app

inputs:
  kubeconfig:
    description: The kubeconfig file contents, with newlines replaced with '\n' (use a secret)
    required: true
  object-path:
    description: The path to the Kubernetes objects (yaml files)
    default: .kubernetes
  namespace:
    description: The namespace in the Kubernetes cluster
    required: true
  cluster:
    description: The cluster that is being deployed to (staging | production)
    default: staging
  ingress-url:
    description: The base url of the Kubernetes ingress
    required: true
  tag:
    description: The image tag to deploy (all images need to have the same tag)
    default: ${{ github.sha }}
  debug:
    description: Output the resulting deployment yaml file
    default: false

runs:
  using: composite
  steps:
    - name: Generate Kubernetes deployment spec
      shell: bash
      env:
        IMAGE_TAG: ${{ inputs.tag }}
        KUBERNETES_NAMESPACE: ${{ inputs.namespace }}
        INGRESS_URL: ${{ inputs.ingress-url }}
      run: |
        shopt -s globstar
        :>__deploy_template
        for f in ${{ inputs.object-path }}/**/*.yml; do cat $f >> __deploy_template; echo --- >> __deploy_template; done
        replace_vars="$(env | cut -f1 -d= | xargs -I {} echo \${} | xargs)"
        envsubst "$replace_vars" < __deploy_template > __deployment.yaml
        if [ "${{ inputs.debug }}" = "true" ]; then cat __deployment.yaml; fi

    - name: Deploy to Kubernetes
      shell: bash
      env:
        KUBERNETES_NAMESPACE: ${{ inputs.namespace }}
      run: |
        echo -e "${{ inputs.kubeconfig }}" > kubeconfig
        kubectl --kubeconfig=kubeconfig --namespace $KUBERNETES_NAMESPACE \
          apply -f __deployment.yaml
