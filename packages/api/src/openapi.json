{
  "openapi": "3.0.0",
  "info": {
    "title": "Etimo Achievements",
    "version": "1.0.0",
    "license": {
      "name": "Swagger spec",
      "url": "/swagger.json"
    },
    "contact": {
      "name": "Etimo AB",
      "url": "https://etimo.se"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "http://45.77.89.90:4000",
      "description": "Etimo server"
    },
    {
      "url": "https://etimo-achievements-staging.herokuapp.com",
      "description": "Staging server"
    },
    {
      "url": "https://etimo-achievements.herokuapp.com",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "ApiKeyHeader": []
    },
    {
      "ApiKeyParameter": []
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      },
      "ApiKeyParameter": {
        "type": "apiKey",
        "in": "query",
        "name": "apiKey"
      }
    },
    "schemas": {
      "NewUser": {
        "title": "User (for creation)",
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "properties": {
              "password": {
                "type": "string",
                "minLength": 8,
                "example": "R8l3t3t1n"
              }
            }
          }
        ],
        "required": [
          "password"
        ]
      },
      "Achievement": {
        "title": "Achievement",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the achievement",
            "example": "Coffee Achievement"
          },
          "description": {
            "type": "string",
            "description": "A description of when the achievement should be awarded",
            "example": "Put on coffee for the gang."
          },
          "achievementPoints": {
            "type": "integer",
            "description": "How many achievement points that should be awarded when this achievement is achieved",
            "example": 500
          },
          "cooldownMinutes": {
            "type": "integer",
            "description": "Minutes until the this achievement becomes available again after awarding it",
            "example": 15,
            "default": 0
          }
        },
        "required": [
          "name",
          "description",
          "achievementPoints"
        ]
      },
      "Award": {
        "title": "Award",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "achievementId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "userId",
          "achievementId"
        ]
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "minLength": 3,
            "example": "niclaslindstedt"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "niclas.lindstedt@etimo.se"
          },
          "slackHandle": {
            "type": "string",
            "description": "The @slack handle of the user",
            "example": "@niclas"
          }
        },
        "required": [
          "username",
          "email",
          "slackHandle"
        ]
      }
    }
  },
  "paths": {
    "/slack/award-achievement": {
      "post": {
        "summary": "Show award achievement list modal in Slack",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/interact": {
      "post": {
        "summary": "Endpoint for slack to respond to interact messages (modals etc...)",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/create-achievement": {
      "post": {
        "summary": "Display achievement creation modal in Slack",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "Request contains a missing or invalid argument."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/sync-users": {
      "post": {
        "summary": "Sync slack users with the database",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "Users was synced."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Get application version information",
        "security": [],
        "responses": {
          "200": {
            "description": "The deployed application's version information."
          }
        },
        "tags": [
          "Version"
        ]
      }
    },
    "/achievements": {
      "get": {
        "summary": "Get a list of achievements",
        "operationId": "getAchievements",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of achievements."
          }
        },
        "tags": [
          "Achievements"
        ]
      },
      "post": {
        "summary": "Create an achievement",
        "operationId": "createAchievement",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Achievement"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The achievement was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAchievementById": {
                "operationId": "getAchievement",
                "parameters": {
                  "achievementId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Request contains a missing or invalid argument."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/achievements/{achievementId}": {
      "get": {
        "summary": "Get a single achievement",
        "operationId": "getAchievement",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "achievementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested achievement."
          },
          "400": {
            "description": "Request contains a missing or invalid argument."
          },
          "404": {
            "description": "The achievement could not be found."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/awards": {
      "get": {
        "summary": "Get a list of awards",
        "operationId": "getAwards",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of awards."
          }
        },
        "tags": [
          "Awards"
        ]
      },
      "post": {
        "summary": "Give a user an award",
        "operationId": "createAward",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Award"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The award was given to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAwardById": {
                "operationId": "getAward",
                "parameters": {
                  "userId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Request contains a missing or invalid argument."
          },
          "404": {
            "description": "The award could not be found."
          }
        },
        "tags": [
          "Awards"
        ]
      }
    },
    "/awards/{awardId}": {
      "get": {
        "summary": "Get a single award",
        "operationId": "getAward",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "awardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested award."
          },
          "400": {
            "description": "Request contains a missing or invalid argument."
          },
          "404": {
            "description": "The user could not be found."
          }
        },
        "tags": [
          "Awards"
        ]
      }
    },
    "/slack/list-achievements": {
      "post": {
        "summary": "Display achievement list modal in Slack",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "Get a list of users",
        "operationId": "getUsers",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users."
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a user",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "description": "A JSON object that contains the user to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetUserById": {
                "operationId": "getUser",
                "parameters": {
                  "userId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Request contains a missing or invalid argument."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Find a single user",
        "operationId": "getUser",
        "security": [
          {
            "ApiKeyHeader": []
          },
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user."
          },
          "400": {
            "description": "Request contains a missing or invalid argument."
          },
          "404": {
            "description": "The user could not be found."
          }
        },
        "tags": [
          "Users"
        ]
      }
    }
  },
  "tags": []
}
