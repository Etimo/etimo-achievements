{
  "openapi": "3.0.0",
  "info": {
    "title": "Etimo Achievements",
    "version": "1.0.0",
    "license": {
      "name": "Swagger spec",
      "url": "/swagger.json"
    },
    "contact": {
      "name": "Etimo AB",
      "url": "https://etimo.se"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "http://45.77.89.90:4000",
      "description": "Etimo server"
    },
    {
      "url": "https://achievements-test.staging.etimo-test.live/api",
      "description": "Staging server"
    },
    {
      "url": "https://achievements-live.staging.etimo-test.live",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "ea-jwt"
      },
      "ApiKeyParameter": {
        "type": "apiKey",
        "in": "query",
        "name": "apiKey"
      }
    },
    "schemas": {
      "AccessToken": {
        "title": "AccessToken",
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Bearer access token used for authorization.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIzZmRmMGNhNi1mNWI5LTRlMTUtYWFlOC04MWM0NTRmZGZmYjAiLCJzdWIiOiIzZDQxYjVkNC0zMmZhLTQxZDYtOTM5OS01NTFmOThmNWIxMjAiLCJuYW1lIjoiTmljbGFzIExpbmRzdGVkdCIsImVtYWlsIjoibmljbGFzLmxpbmRzdGVkdEBldGltby5zZSIsImlzcyI6ImV0aW1vLWFjaGlldmVtZW50cyIsImF1ZCI6ImV0aW1vLWFjaGlldmVtZW50cyIsImV4cCI6MTY0NzY4OTA5NywiaWF0IjoxNjQ3Njg1NDk3fQ.npzbTJxvdHYF5qYPbAq8cjWReDiQkGbEIEiMCVWNkic"
          },
          "token_type": {
            "type": "string",
            "description": "The type of token issued.",
            "example": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "description": "In how many seconds the token will expire.",
            "example": 3600
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token that can be used to get a new access token.",
            "example": "V2R3ARQDwpzrLPXhsBZgexPMCp7mPQfsnATPie6h5RCdmmkU4UAqKfWvypPkhbHG"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The scopes assigned to the access token.",
            "example": "r:achievements rw:awards r:users"
          }
        }
      },
      "TokenInfo": {
        "title": "TokenInfo",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "If the token is active",
            "example": true
          },
          "scope": {
            "type": "string",
            "description": "The scopes assigned to the token.",
            "example": "r:achievements rw:awards r:users"
          },
          "username": {
            "type": "string",
            "description": "The username of the owner of the token.",
            "example": "niclas.lindstedt@etimo.se"
          },
          "token_type": {
            "type": "string",
            "description": "The type of token.",
            "example": "bearer"
          },
          "jti": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the token.",
            "example": "fe893f86-4107-472e-b34e-c4a9abb06fc5"
          },
          "sub": {
            "type": "string",
            "format": "uuid",
            "description": "The subject of the token (usually the userId).",
            "example": "572c51c0-6dd4-4ef8-90da-b7aac0ef6846"
          },
          "iss": {
            "type": "string",
            "description": "The issuer of the token.",
            "example": "etimo-achievements"
          },
          "aud": {
            "type": "string",
            "description": "The audience of the token.",
            "example": "etimo-achievements"
          },
          "exp": {
            "type": "number",
            "description": "The unix timestamp when the token expires.",
            "example": 1647954723
          },
          "iat": {
            "type": "number",
            "description": "The unix timestamp when the token was issued.",
            "example": 1647951123
          }
        }
      },
      "UserInfo": {
        "title": "UserInfo",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user's id.",
            "example": "238ec288-ffc2-41ad-918b-7aa1f4f855dd"
          },
          "email": {
            "type": "string",
            "description": "The user's e-mail.",
            "example": "niclas.lindstedt@etimo.se"
          },
          "verified_email": {
            "type": "boolean",
            "description": "Whether the e-mail has been verified or not.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The user's full name.",
            "example": "Niclas Lindstedt"
          },
          "given_name": {
            "type": "string",
            "description": "The user's given name.",
            "example": "Niclas"
          },
          "family_name": {
            "type": "string",
            "description": "The user's family name.",
            "example": "Lindstedt"
          },
          "picture": {
            "type": "string",
            "description": "An url to the user's picture.",
            "example": "https://picsum.photos/200"
          },
          "hd": {
            "type": "string",
            "description": "The hosted domain of the user.",
            "example": "etimo.se"
          }
        }
      },
      "Achievement": {
        "title": "Achievement",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the achievement",
            "example": "Coffee Achievement"
          },
          "description": {
            "type": "string",
            "description": "A description of when the achievement should be awarded",
            "example": "Put on coffee for the gang."
          },
          "achievementPoints": {
            "type": "integer",
            "description": "How many achievement points that should be awarded when this achievement is achieved",
            "example": 500
          },
          "cooldownMinutes": {
            "type": "integer",
            "description": "Minutes until the this achievement becomes available again after awarding it",
            "example": 15,
            "default": 0
          }
        },
        "required": [
          "name",
          "description",
          "achievementPoints"
        ]
      },
      "Award": {
        "title": "Award",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "awardedByUserId": {
            "type": "string",
            "format": "uuid"
          },
          "achievementId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "userId",
          "achievementId"
        ]
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "example": "Niclas Lindstedt"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "niclas.lindstedt@etimo.se"
          },
          "slackHandle": {
            "type": "string",
            "description": "The @slack handle of the user",
            "example": "@niclas"
          }
        },
        "required": [
          "name",
          "email",
          "slackHandle"
        ]
      }
    }
  },
  "paths": {
    "/auth/logout": {
      "get": {
        "summary": "Logout",
        "operationId": "authLogout",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout success.",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "ea-jwt=deleted; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT, ea-rt=deleted; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/achievements": {
      "get": {
        "summary": "Get a list of achievements",
        "operationId": "getAchievements",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Achievement"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      },
      "post": {
        "summary": "Create an achievement",
        "operationId": "createAchievement",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Achievement"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAchievementById": {
                "operationId": "getAchievement",
                "parameters": {
                  "achievementId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/achievements/{achievementId}": {
      "get": {
        "summary": "Get a single achievement",
        "operationId": "getAchievement",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "achievementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Achievement"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/auth/login/{provider}": {
      "get": {
        "summary": "Start a login request",
        "operationId": "authLogin",
        "security": [],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "The OAuth provider to use for login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "301": {
            "description": "Redirection to OAuth2 service.",
            "headers": {
              "Location": {
                "description": "URI to OAuth2 token endpoint.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/refresh": {
      "get": {
        "summary": "Renew access token",
        "operationId": "authRefresh",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "ea-jwt=abcde12345; Path=/; Secure; HttpOnly, ea-rt=abcde12345; Path=/; Secure; HttpOnly"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/callback/{provider}": {
      "get": {
        "summary": "Callback URL for OAuth2 code flow",
        "operationId": "authCallback",
        "security": [],
        "x-allow-unknown-query-parameters": true,
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "The OAuth provider to use for login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The OAuth2 code to exchange for an access token.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "ea-jwt=abcde12345; Path=/; Secure; HttpOnly, ea-rt=abcde12345; Path=/; Secure; HttpOnly"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/userinfo": {
      "get": {
        "summary": "Get userinfo from token",
        "operationId": "authUserInfo",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/validate": {
      "get": {
        "summary": "Validate JWT token",
        "operationId": "authValidate",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/introspect": {
      "get": {
        "summary": "Token introspection",
        "operationId": "authIntrospect",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/awards": {
      "get": {
        "summary": "Get a list of awards",
        "operationId": "getAwards",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Award"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Awards"
        ]
      },
      "post": {
        "summary": "Give a user an award",
        "operationId": "createAward",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Award"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAwardById": {
                "operationId": "getAward",
                "parameters": {
                  "userId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The user/achievement could not be found."
          }
        },
        "tags": [
          "Awards"
        ]
      }
    },
    "/awards/{awardId}": {
      "get": {
        "summary": "Get a single award",
        "operationId": "getAward",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "awardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Award"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Awards"
        ]
      }
    },
    "/probes/readiness": {
      "get": {
        "summary": "Readiness probe",
        "operationId": "getReadiness",
        "responses": {
          "200": {
            "description": "The request was successful"
          }
        },
        "tags": [
          "Probes"
        ]
      }
    },
    "/probes/liveness": {
      "get": {
        "summary": "Liveness probe",
        "operationId": "getLiveness",
        "responses": {
          "200": {
            "description": "The request was successful"
          }
        },
        "tags": [
          "Probes"
        ]
      }
    },
    "/slack/list-achievements": {
      "post": {
        "summary": "Display achievement list modal in Slack",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/award-achievement": {
      "post": {
        "summary": "Show award achievement list modal in Slack",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/interact": {
      "post": {
        "summary": "Endpoint for slack to respond to interact messages (modals etc...)",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/create-achievement": {
      "post": {
        "summary": "Display achievement creation modal in Slack",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/sync-users": {
      "post": {
        "summary": "Sync slack users with the database",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "Users was synced."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "Get a list of users",
        "operationId": "getUsers",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a user",
        "operationId": "createUser",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetUserById": {
                "operationId": "getUser",
                "parameters": {
                  "userId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get a single user",
        "operationId": "getUser",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Get application version information",
        "security": [],
        "responses": {
          "200": {
            "description": "The request was successful"
          }
        },
        "tags": [
          "Version"
        ]
      }
    }
  },
  "tags": []
}
