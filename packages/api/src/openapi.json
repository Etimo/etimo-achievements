{
  "openapi": "3.0.0",
  "info": {
    "title": "Etimo Achievements",
    "version": "1.0.0",
    "license": {
      "name": "Swagger spec",
      "url": "openapi.json"
    },
    "contact": {
      "name": "Etimo AB",
      "url": "https://etimo.se"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "http://45.77.89.90:4000",
      "description": "Etimo server"
    },
    {
      "url": "https://achievements-test.staging.etimo-test.live/api",
      "description": "Staging server"
    },
    {
      "url": "https://achievements-live.staging.etimo-test.live/api",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "jwtCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "ea-jwt"
      },
      "refreshTokenCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "ea-rt"
      },
      "ApiKeyParameter": {
        "type": "apiKey",
        "in": "query",
        "name": "apiKey"
      }
    },
    "schemas": {
      "AccessToken": {
        "title": "AccessToken",
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Bearer access token used for authorization.",
            "example": "U2FsdGVkX1/Vvv89nfMwgfO/CG24SnP9LIvf/h8VkbmiRIWa0dDraOuDSAEILlI3+ZvZ..."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token issued.",
            "example": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "description": "In how many seconds the token will expire.",
            "example": 3600
          },
          "rt_expires_in": {
            "type": "integer",
            "description": "In how many seconds the refresh token will expire.",
            "example": 2592000
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token that can be used to get a new access token.",
            "example": "U2FsdGVkX18fnSqv0NhgmH4gkUT+f4VYynZD5WA2hALnLluoop4wa98soXGxUVPcrHMa..."
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The scopes assigned to the access token.",
            "example": "r:achievements rw:awards r:users"
          }
        }
      },
      "NewBadgeAward": {
        "title": "NewBadgeAward",
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "badgeId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "userIds",
          "badgeId"
        ]
      },
      "TokenInfo": {
        "title": "TokenInfo",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "If the token is active",
            "example": true
          },
          "scope": {
            "type": "string",
            "description": "The scopes assigned to the token.",
            "example": "r:achievements rw:awards r:users"
          },
          "username": {
            "type": "string",
            "description": "The username of the owner of the token.",
            "example": "niclas.lindstedt@etimo.se"
          },
          "token_type": {
            "type": "string",
            "description": "The type of token.",
            "example": "bearer"
          },
          "jti": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the token.",
            "example": "fe893f86-4107-472e-b34e-c4a9abb06fc5"
          },
          "sub": {
            "type": "string",
            "format": "uuid",
            "description": "The subject of the token (usually the userId).",
            "example": "572c51c0-6dd4-4ef8-90da-b7aac0ef6846"
          },
          "iss": {
            "type": "string",
            "description": "The issuer of the token.",
            "example": "etimo-achievements"
          },
          "aud": {
            "type": "string",
            "description": "The audience of the token.",
            "example": "etimo-achievements"
          },
          "exp": {
            "type": "number",
            "description": "The unix timestamp when the token expires.",
            "example": 1647954723
          },
          "iat": {
            "type": "number",
            "description": "The unix timestamp when the token was issued.",
            "example": 1647951123
          }
        }
      },
      "TokenRequest": {
        "title": "TokenRequest",
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "client_credentials"
            ]
          },
          "client_id": {
            "type": "string",
            "description": "The client id",
            "example": "eb64a4dc-02fa-44dd-aa55-026160dcdc6b"
          },
          "client_secret": {
            "type": "string",
            "description": "The client secret",
            "example": "2e7f1d2b-3ac8-45da-b18f-d12bd52b5f48"
          }
        }
      },
      "TokenValidation": {
        "title": "TokenValidation",
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "integer",
            "description": "In how many seconds the token will expire.",
            "example": 3600
          }
        }
      },
      "UserInfo": {
        "title": "UserInfo",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The user's id.",
            "example": "238ec288-ffc2-41ad-918b-7aa1f4f855dd"
          },
          "email": {
            "type": "string",
            "description": "The user's e-mail.",
            "example": "niclas.lindstedt@etimo.se"
          },
          "verified_email": {
            "type": "boolean",
            "description": "Whether the e-mail has been verified or not.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The user's full name.",
            "example": "Niclas Lindstedt"
          },
          "given_name": {
            "type": "string",
            "description": "The user's given name.",
            "example": "Niclas"
          },
          "family_name": {
            "type": "string",
            "description": "The user's family name.",
            "example": "Lindstedt"
          },
          "picture": {
            "type": "string",
            "description": "An url to the user's picture.",
            "example": "https://picsum.photos/200"
          },
          "hd": {
            "type": "string",
            "description": "The hosted domain of the user.",
            "example": "etimo.se"
          }
        }
      },
      "Achievement": {
        "title": "Achievement",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the achievement",
            "maxLength": 255,
            "example": "Coffee Achievement"
          },
          "description": {
            "type": "string",
            "description": "A description of when the achievement should be awarded",
            "maxLength": 255,
            "example": "Put on coffee for the gang."
          },
          "achievementPoints": {
            "type": "integer",
            "description": "How many achievement points that should be awarded when this achievement is achieved",
            "example": 500
          },
          "cooldownMinutes": {
            "type": "integer",
            "description": "Minutes until the this achievement becomes available again after awarding it",
            "example": 15,
            "default": 0
          },
          "selfAwardable": {
            "type": "boolean",
            "description": "Is it possible to give the achievement to yourself?",
            "example": true,
            "default": true
          },
          "globalCooldowns": {
            "type": "boolean",
            "description": "Is the cooldown for this achievement applied globally? I.e. the award cannot be given to anyone when the cooldown is still active",
            "example": false,
            "default": false
          }
        },
        "required": [
          "name",
          "description",
          "achievementPoints"
        ]
      },
      "AchievementFavorite": {
        "title": "AchievementFavorite",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "achievementId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "achievementId"
        ]
      },
      "Award": {
        "title": "Award",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "awardedByUserId": {
            "type": "string",
            "format": "uuid"
          },
          "achievementId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "userId",
          "achievementId"
        ]
      },
      "BadgeAward": {
        "title": "BadgeAward",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "awardedByUserId": {
            "type": "string",
            "format": "uuid"
          },
          "badgeId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "userId",
          "badgeId"
        ]
      },
      "Badge": {
        "title": "Badge",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the badge",
            "maxLength": 255,
            "example": "Åre 2022"
          },
          "description": {
            "type": "string",
            "description": "A description of when the badge should be awarded",
            "maxLength": 255,
            "example": "Åk med Etimo till Åre"
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "Highscore": {
        "title": "Highscore",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "achievements": {
            "type": "integer",
            "description": "How many achievements have been awarded to the user",
            "example": 25
          },
          "points": {
            "type": "integer",
            "description": "How many achievement points have been awarded to the user",
            "example": 12000
          },
          "kickback": {
            "type": "integer",
            "description": "How many kickback achievement points have been awarded to the user",
            "example": 1200
          },
          "pointsPerAchievement": {
            "type": "integer",
            "description": "Total score divided by amount of achievements",
            "example": 528
          },
          "totalPoints": {
            "type": "integer",
            "description": "Total points",
            "example": 13200
          },
          "givenAchievements": {
            "type": "integer",
            "description": "How many achievements the user have given other users",
            "example": 5
          },
          "kickbackPerAchievement": {
            "type": "integer",
            "description": "Total kickback divided by amount of achievements",
            "example": 48
          }
        }
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "example": "Niclas Lindstedt"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "niclas.lindstedt@etimo.se"
          },
          "slackHandle": {
            "type": "string",
            "description": "The @slack handle of the user",
            "example": "@niclas"
          },
          "image": {
            "type": "string",
            "description": "The url to the user's image",
            "example": "https://lh3.googleusercontent.com/a/AItbvmmjI2iBhkmtsdRhooDvMuW25VgaZGBA5avYuM9h",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "email"
        ]
      }
    }
  },
  "paths": {
    "/auth/logout": {
      "get": {
        "summary": "Logout",
        "operationId": "authLogout",
        "responses": {
          "200": {
            "description": "Logout success.",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "ea-jwt=deleted; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT, ea-rt=deleted; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/achievements": {
      "get": {
        "summary": "Get a list of achievements",
        "operationId": "getAchievements",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the result set.",
            "example": [
              "id~desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Achievement"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      },
      "post": {
        "summary": "Create an achievement",
        "operationId": "createAchievement",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Achievement"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAchievementById": {
                "operationId": "getAchievement",
                "parameters": {
                  "achievementId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/achievements/list": {
      "post": {
        "summary": "Get many achievements by list of ids",
        "operationId": "listAchievements",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "description": "ID of the desired resource."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Achievement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/achievements/favorites": {
      "get": {
        "summary": "Get user's favorite achievements",
        "operationId": "getFavoriteAchievement",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the result set.",
            "example": [
              "id~desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      },
      "post": {
        "summary": "Add an achievement to your favorites",
        "operationId": "createFavoriteAchievement",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AchievementFavorite"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/achievements/favorites/{achievementId}": {
      "delete": {
        "summary": "Remove an achievement from favorites",
        "operationId": "removeFavoriteAchievement",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "achievementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/achievements/{achievementId}": {
      "get": {
        "summary": "Get a single achievement",
        "operationId": "getAchievement",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "achievementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Achievement"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Achievements"
        ]
      },
      "put": {
        "summary": "Update an achievement",
        "operationId": "updateAchievement",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "achievementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Achievement"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      },
      "delete": {
        "summary": "Delete an achievement",
        "operationId": "deleteAchievement",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "achievementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Achievements"
        ]
      }
    },
    "/auth/login/{provider}": {
      "get": {
        "summary": "Start a login request",
        "operationId": "authLogin",
        "security": [],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "The OAuth provider to use for login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "The state to return to the client after authentication.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "301": {
            "description": "Redirection to OAuth2 service.",
            "headers": {
              "Location": {
                "description": "URI to OAuth2 token endpoint.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/refresh": {
      "get": {
        "summary": "Renew access token",
        "operationId": "authRefresh",
        "security": [
          {
            "refreshTokenCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "ea-jwt=abcde12345; Path=/; Secure; HttpOnly, ea-rt=abcde12345; Path=/; Secure; HttpOnly"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/token": {
      "post": {
        "summary": "Get a token",
        "operationId": "authToken",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/callback/{provider}": {
      "get": {
        "summary": "Callback URL for OAuth2 code flow",
        "operationId": "authCallback",
        "security": [],
        "x-allow-unknown-query-parameters": true,
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "The OAuth provider to use for login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "The OAuth2 code to exchange for an access token.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "ea-jwt=abcde12345; Path=/; Secure; HttpOnly, ea-rt=abcde12345; Path=/; Secure; HttpOnly"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/userinfo": {
      "get": {
        "summary": "Get userinfo from token",
        "operationId": "authUserInfo",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/validate": {
      "get": {
        "summary": "Validate JWT token",
        "operationId": "authValidate",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenValidation"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/introspect": {
      "get": {
        "summary": "Token introspection",
        "operationId": "authIntrospect",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/awards": {
      "get": {
        "summary": "Get a list of awards",
        "operationId": "getAwards",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the result set.",
            "example": [
              "id~desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "achievementId",
            "in": "query",
            "description": "Only return data with this achievementId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "awardedByUserId",
            "in": "query",
            "description": "Only return awards with this awardedByUserId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Only return data with the value of provided userId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Award"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Awards"
        ]
      },
      "post": {
        "summary": "Give a user an award",
        "operationId": "createAward",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Award"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAwardById": {
                "operationId": "getAward",
                "parameters": {
                  "userId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The user/achievement could not be found."
          }
        },
        "tags": [
          "Awards"
        ]
      }
    },
    "/awards/{awardId}": {
      "get": {
        "summary": "Get a single award",
        "operationId": "getAward",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "awardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Award"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Awards"
        ]
      },
      "delete": {
        "summary": "Delete an award",
        "operationId": "deleteAward",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "awardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Awards"
        ]
      }
    },
    "/badge-awards": {
      "post": {
        "summary": "Give a user a badge",
        "operationId": "createBadgeAward",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBadgeAward"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAwardById": {
                "operationId": "getBadgeAward",
                "parameters": {
                  "userId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The user/badge could not be found."
          }
        },
        "tags": [
          "Badge Awards"
        ]
      },
      "get": {
        "summary": "Get a list of badge awards",
        "operationId": "getBadgeAwards",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the result set.",
            "example": [
              "id~desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Only return data with the value of provided userId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "badgeId",
            "in": "query",
            "description": "Only return data with this badgeId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BadgeAward"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Badge Awards"
        ]
      }
    },
    "/badge-awards/{badgeAwardId}": {
      "get": {
        "summary": "Get a single badge award",
        "operationId": "getBadgeAward",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "badgeAwardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadgeAward"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Badge Awards"
        ]
      },
      "delete": {
        "summary": "Delete a badge award",
        "operationId": "deleteBadgeAward",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "badgeAwardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Badge Awards"
        ]
      }
    },
    "/badges": {
      "post": {
        "summary": "Create a badge",
        "operationId": "createBadge",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Badge"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The badge was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetAchievementById": {
                "operationId": "getBadge",
                "parameters": {
                  "achievementId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Badges"
        ]
      },
      "get": {
        "summary": "Get a list of badges",
        "operationId": "getBadges",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the result set.",
            "example": [
              "id~desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Badge"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Badges"
        ]
      }
    },
    "/badges/{badgeId}": {
      "get": {
        "summary": "Get a single badge",
        "operationId": "getBadge",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "badgeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badge"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Badges"
        ]
      },
      "put": {
        "summary": "Update a badge",
        "operationId": "updateBadge",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "badgeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Badge"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Badges"
        ]
      },
      "delete": {
        "summary": "Delete a badge",
        "operationId": "deleteBadge",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "badgeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Badges"
        ]
      }
    },
    "/badges/list": {
      "post": {
        "summary": "Get many badges by list of ids",
        "operationId": "listBadges",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "description": "ID of the desired resource."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Badge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Badges"
        ]
      }
    },
    "/feature/{featureName}": {
      "get": {
        "summary": "Get feature flag status",
        "operationId": "getFeature",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "featureName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          }
        },
        "tags": [
          "Features"
        ]
      }
    },
    "/highscores": {
      "get": {
        "summary": "Get a list of awards",
        "operationId": "getHighscores",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the result set.",
            "example": [
              "id~desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Highscore"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Highscores"
        ]
      }
    },
    "/probes/readiness": {
      "get": {
        "summary": "Readiness probe",
        "operationId": "getReadiness",
        "responses": {
          "200": {
            "description": "The request was successful"
          }
        },
        "tags": [
          "Probes"
        ]
      }
    },
    "/probes/liveness": {
      "get": {
        "summary": "Liveness probe",
        "operationId": "getLiveness",
        "responses": {
          "200": {
            "description": "The request was successful"
          }
        },
        "tags": [
          "Probes"
        ]
      }
    },
    "/slack/list-achievements": {
      "post": {
        "summary": "Display achievement list modal in Slack",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/award-achievement": {
      "post": {
        "summary": "Show award achievement list modal in Slack",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/interact": {
      "post": {
        "summary": "Endpoint for slack to respond to interact messages (modals etc...)",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/create-achievement": {
      "post": {
        "summary": "Display achievement creation modal in Slack",
        "security": [
          {
            "ApiKeyParameter": []
          }
        ],
        "responses": {
          "200": {
            "description": "The modal was created."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/slack/sync-users": {
      "post": {
        "summary": "Sync slack users with the database",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Users were synced."
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Slack"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "Get a list of users",
        "operationId": "getUsers",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set.",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The numbers of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The order of the result set.",
            "example": [
              "id~desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a user",
        "operationId": "createUser",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created resource."
                    }
                  }
                }
              }
            },
            "links": {
              "GetUserById": {
                "operationId": "getUser",
                "parameters": {
                  "userId": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/list": {
      "post": {
        "summary": "Get many users by list of ids",
        "operationId": "listAchievements",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "description": "ID of the desired resource."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get a single user",
        "operationId": "getUser",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Users"
        ]
      },
      "put": {
        "summary": "Update a user",
        "operationId": "updateUser",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/profile": {
      "get": {
        "summary": "Get your profile",
        "operationId": "getProfile",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          },
          "404": {
            "description": "The requested resource could not be found."
          }
        },
        "tags": [
          "Users"
        ]
      },
      "put": {
        "summary": "Update your profile",
        "operationId": "updateProfile",
        "security": [
          {
            "jwtCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The request was successful"
          },
          "400": {
            "description": "The request was invalid and could/would not be processed."
          },
          "401": {
            "description": "The request was unauthorized."
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Get application version information",
        "security": [],
        "responses": {
          "200": {
            "description": "The request was successful"
          }
        },
        "tags": [
          "Version"
        ]
      }
    }
  },
  "tags": []
}