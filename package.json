{
  "name": "root",
  "private": true,
  "type": "module",
  "workspaces": [
    "packages/*"
  ],
  "scripts": {
    "bootstrap": "npm run install-deps && npm run postinstall && npm run env && npm run build && npm run docker-rebuild && npm run db-reset-force",
    "build": "npm run script build",
    "clean": "npm run script clean",
    "clear": "npm run script clear && node ./scripts/remove-path.js --recursive node_modules",
    "compile": "npm run script compile",
    "compile-test": "npm run script compile-test",
    "db": "docker-compose up -d postgres pgadmin",
    "db-create": "docker exec -e PGPASSWORD=root achievements-pg psql -U root -c \"CREATE DATABASE achievements\"",
    "db-drop": "docker exec -e PGPASSWORD=root achievements-pg psql -U root -c \"DROP DATABASE IF EXISTS achievements\"",
    "db-recreate": "node ./scripts/db-recreate.js",
    "db-reset": "node ./scripts/db-reset.js",
    "db-reset-force": "node ./scripts/db-reset-force.js",
    "docker-build": "node ./scripts/build-docker.js --no-base",
    "docker-base": "node ./scripts/build-docker.js --only-base",
    "docker-rebuild": "node ./scripts/build-docker.js --nodemon",
    "docker-up": "docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build",
    "docker-up-prod": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans",
    "env": "node ./scripts/copy-env.js",
    "env-force": "node ./scripts/copy-env.js --force",
    "generate-jest": "node ./scripts/update-jest-config.js",
    "generate-openapi": "cd packages/api && npm run openapi",
    "generate-references": "node ./scripts/update-references.js",
    "install-deps": "node ./scripts/install-dependencies.js && npm run update",
    "install-extensions": "node ./scripts/install-vscode-extensions.js",
    "lint": "eslint --config .eslintrc.json --fix packages/**/*.ts",
    "migration-apply": "cd packages/data && npm run migration-apply",
    "migration-new": "cd packages/data && npm run migration-new",
    "migration-revert": "cd packages/data && npm run migration-revert",
    "nodemon": "docker-compose up -d --build nodemon",
    "peek": "node ./scripts/peek-version.js",
    "prettier": "prettier --write .",
    "reset": "npm run clear && yarn install && npm run docker-rebuild && npm run compile",
    "restart": "docker stop $(docker ps -aq --filter 'label=com.etimo-achievements.monitored') && npm run build && npm run start",
    "script": "node ./scripts/run-script.js",
    "seed-new": "cd packages/data && npm run seed-new",
    "seed-run": "cd packages/data && npm run seed-run",
    "start": "docker-compose up -d --build && docker-compose logs --tail 100 -f",
    "start-api": "cd packages/api && npm run dev",
    "start-web": "cd packages/web && npm start",
    "start-fresh": "yarn install && npm run build && npm run generate-openapi && npm run docker-rebuild && npm run db-reset-force && npm run start",
    "start-host": "docker-compose stop api nodemon && npx concurrently \"npm run start-api\" \"npm run start-web\" \"nodemon\" \"npm run db\"",
    "support": "npm run db && npm run nodemon",
    "test": "npm run script test",
    "test-integration": "npm run script test-integration",
    "update": "node ./scripts/update-modules.js",
    "postinstall": "npx husky install"
  },
  "devDependencies": {
    "@tsconfig/node14": "^1.0.1",
    "@types/lodash": "^4.14.178",
    "@typescript-eslint/eslint-plugin": "^4.32.0",
    "@typescript-eslint/parser": "^4.32.0",
    "concurrently": "^7.0.0",
    "crypto": "^1.0.1",
    "dotenv-defaults": "^3.0.0",
    "eslint": "^7.32.0",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-react": "^7.26.0",
    "filehound": "^1.17.5",
    "husky": "^7.0.2",
    "lint-staged": "^11.1.2",
    "lodash": "^4.17.21",
    "node-fetch": "^3.2.3",
    "nodemon": "^2.0.15",
    "prettier": "^2.4.1",
    "spacetime": "^6.16.3",
    "syncpack": "^6.2.0",
    "typescript": "^4.5.5"
  },
  "lint-staged": {
    "**/*": "prettier --write --ignore-unknown",
    "*.{js,ts}": "eslint --cache --fix",
    "*.{css,md}": "prettier --write"
  }
}
